{"food_items_of_the_day_time": ["rajma"], "food_provided": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>requests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None? // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"\n        type=\"text/css\">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js\"></script>\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script type=\"text/javascript\">\n      var TRACEBACK = 140155608370480,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"XXP4UpJQJeHxogg4npDk\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>requests.exceptions.MissingSchema</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">requests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  \n  <ul><li><div class=\"frame\" id=\"frame-140155608370368\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2464</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ, start_response):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def __repr__(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608368408\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2450</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608368520\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1867</em>,\n      in <code class=\"function\">handle_exception</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># (the function was actually called from the except part)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span># otherwise, we just raise the error again</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if exc_value is e:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise e</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>server_error = InternalServerError()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608368688\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/_compat.py\"</cite>,\n      line <em class=\"line\">39</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608367512\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2447</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608368128\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1952</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608368744\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1821</em>,\n      in <code class=\"function\">handle_user_exception</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>return self.handle_http_exception(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>handler = self._find_error_handler(e)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if handler is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return handler(e)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def handle_exception(self, e):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>associated with it, or that was raised from an error handler.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608368856\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/_compat.py\"</cite>,\n      line <em class=\"line\">39</em>,\n      in <code class=\"function\">reraise</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>import collections.abc as collections_abc</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if value.__traceback__ is not tb:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise value.with_traceback(tb)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>raise value</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>implements_to_string = _identity</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608367400\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1950</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608367568\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1936</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608370536\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/foodClassification/backend/app.py\"</cite>,\n      line <em class=\"line\">20</em>,\n      in <code class=\"function\">predict</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>@app.route('/predict', methods=['POST', 'GET'])</pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def predict():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># print(request.json)</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>response_get = requests.get(request.json.get('image'))</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>try:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>file = open(&quot;index.jpeg&quot;, &quot;wb&quot;)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>file.write(response_get.content)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>file.close()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>food_class = predict_main()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608367344\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/requests/api.py\"</cite>,\n      line <em class=\"line\">76</em>,\n      in <code class=\"function\">get</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>:rtype: requests.Response</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>kwargs.setdefault('allow_redirects', True)</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>return request('get', url, params=params, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def options(url, **kwargs):</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>r&quot;&quot;&quot;Sends an OPTIONS request.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608367736\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/requests/api.py\"</cite>,\n      line <em class=\"line\">61</em>,\n      in <code class=\"function\">request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span># cases, and look like a memory leak in others.</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>with sessions.Session() as session:</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return session.request(method=method, url=url, **kwargs)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def get(url, params=None, **kwargs):</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608369248\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/requests/sessions.py\"</cite>,\n      line <em class=\"line\">516</em>,\n      in <code class=\"function\">request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>params=params or {},</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>auth=auth,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>cookies=cookies,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>hooks=hooks,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>prep = self.prepare_request(req)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>proxies = proxies or {}</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>settings = self.merge_environment_settings(</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>prep.url, proxies, stream, verify, cert</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608367624\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/requests/sessions.py\"</cite>,\n      line <em class=\"line\">459</em>,\n      in <code class=\"function\">prepare_request</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>json=request.json,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>params=merge_setting(request.params, self.params),</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>auth=merge_setting(auth, self.auth),</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>cookies=merged_cookies,</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>hooks=merge_hooks(request.hooks, self.hooks),</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return p</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def request(self, method, url,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>params=None, data=None, headers=None, cookies=None, files=None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608369864\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/requests/models.py\"</cite>,\n      line <em class=\"line\">314</em>,\n      in <code class=\"function\">prepare</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>method=None, url=None, headers=None, files=None, data=None,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>params=None, auth=None, cookies=None, hooks=None, json=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&quot;&quot;&quot;Prepares the entire request with the given parameters.&quot;&quot;&quot;</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>self.prepare_method(method)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>self.prepare_url(url, params)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.prepare_headers(headers)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.prepare_cookies(cookies)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.prepare_body(data, files, json)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self.prepare_auth(auth, url)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140155608369192\">\n  <h4>File <cite class=\"filename\">\"/home/jarvis/.local/lib/python3.6/site-packages/requests/models.py\"</cite>,\n      line <em class=\"line\">388</em>,\n      in <code class=\"function\">prepare_url</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not scheme:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>error = (&quot;Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?&quot;)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>error = error.format(to_native_string(url, 'utf8'))</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise MissingSchema(error)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if not host:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise InvalidURL(&quot;Invalid URL %r: No host supplied&quot; % url)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span># In general, we want to try IDNA encoding the hostname if the string contains</pre></div>\n</div>\n</ul>\n  <blockquote>requests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?</blockquote>\n</div>\n\n<div class=\"plain\">\n  <form action=\"/?__debugger__=yes&amp;cmd=paste\" method=\"post\">\n    <p>\n      <input type=\"hidden\" name=\"language\" value=\"pytb\">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class=\"pastemessage\">You can also paste this traceback into\n      a <a href=\"https://gist.github.com/\">gist</a>:\n      <input type=\"submit\" value=\"create paste\"></span>\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/_compat.py&quot;, line 39, in reraise\n    raise value\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/_compat.py&quot;, line 39, in reraise\n    raise value\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py&quot;, line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;/home/jarvis/foodClassification/backend/app.py&quot;, line 20, in predict\n    response_get = requests.get(request.json.get('image'))\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/requests/api.py&quot;, line 76, in get\n    return request('get', url, params=params, **kwargs)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/requests/api.py&quot;, line 61, in request\n    return session.request(method=method, url=url, **kwargs)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/requests/sessions.py&quot;, line 516, in request\n    prep = self.prepare_request(req)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/requests/sessions.py&quot;, line 459, in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/requests/models.py&quot;, line 314, in prepare\n    self.prepare_url(url, params)\n  File &quot;/home/jarvis/.local/lib/python3.6/site-packages/requests/models.py&quot;, line 388, in prepare_url\n    raise MissingSchema(error)\nrequests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?</textarea>\n  </form>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 2464, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 2450, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 1867, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 2447, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 1952, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 1821, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\n    raise value\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 1950, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/flask/app.py\", line 1936, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/home/jarvis/foodClassification/backend/app.py\", line 20, in predict\n    response_get = requests.get(request.json.get('image'))\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/requests/api.py\", line 76, in get\n    return request('get', url, params=params, **kwargs)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/requests/api.py\", line 61, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/requests/sessions.py\", line 516, in request\n    prep = self.prepare_request(req)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/requests/sessions.py\", line 459, in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/requests/models.py\", line 314, in prepare\n    self.prepare_url(url, params)\n  File \"/home/jarvis/.local/lib/python3.6/site-packages/requests/models.py\", line 388, in prepare_url\n    raise MissingSchema(error)\nrequests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?\n\n-->\n", "image_url": "https://ipfs.infura.io/ipfs/QmbWJJ89fwq7FKcdzQSx3fUk5SAmGaXh1fF78wPh4hU37z"}